######################################################################################

BASE_URL = 'http://kissanime.com'

######################################################################################
# Pulls show name from show_url to add to show_title

def MetadataObjectForURL(url):
	page_data = HTML.ElementFromURL(url)
	meta_data = HTML.ElementFromURL(url.rsplit(["/"[1]])[0])
	temp_title = url.rsplit(["?"[1]])[0]
	show_title = str(meta_data.xpath("//div[@class='barContent']//a[@class='bigChar']/text()")[0]) + " " + str(temp_title.rsplit(["/"[1]])[1])
	show_thumb = meta_data.xpath("//div[@class='rightBox'][1]//div[@class='barContent']/div/img/@src")[0]
	show_summary = '\r\n\r\n'.join(map(str, meta_data.xpath("//div[@id='leftside']//p[5]/text()")))
	if len(show_summary) < 1:
		show_summary = '\r\n\r\n'.join(map(str, meta_data.xpath("//div[@class='bigBarContainer'][1]//td/text()")))
		
	return VideoClipObject(
		title = show_title,
		summary = show_summary,
		thumb = show_thumb
		)

######################################################################################
#Currently only .flv appears to be a shared container on all videos
	
def MediaObjectsForURL(url):

	return[
	
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = 480,
			audio_channels = 2,
			container = Container.MP4,
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt = "480"))]
			),

		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = 360,
			audio_channels = 2,
			container = Container.MP4,
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt = "360"))]
			),
		
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = 240,
			audio_channels = 2,
			container = Container.MP4,
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt = "240"))]
		)
	]

######################################################################################
# Creates a list of available videdo links in order of quality and returns the closest match

def PlayVideo(url, fmt):

	page_data = HTML.ElementFromURL(url)
	video = []

	for each in page_data.xpath("//div[@class='barContent']/div/div/a"):
		link = each.xpath("./@href")[0]
		quality = each.xpath("./text()")[0]
		if quality.find(".flv") > 0:
			video.append(link)
				
	if fmt == "480":
		return Redirect(video[0])
		
	if fmt == "360":
		return Redirect(video[1])

	if fmt == "240":
		return Redirect(video[2])