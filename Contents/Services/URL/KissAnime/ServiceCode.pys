######################################################################################

BASE_URL = 'http://kissanime.com'

######################################################################################
# Pulls show name from show_url to add to show_title

def MetadataObjectForURL(url):
	page_data = HTML.ElementFromURL(url)
	show_url = page_data.xpath("//div[@id='navsubbar']/p/a/@href")[0]
	meta_data = HTML.ElementFromURL(show_url)
	temp_title = url.rsplit("?")[0]
	show_title = str(meta_data.xpath("//div[@class='barContent']//a[@class='bigChar']/text()")[0]) + " " + str(temp_title.rsplit("/", 1)[1])
	show_thumb = meta_data.xpath("//div[@class='rightBox'][1]//div[@class='barContent']/div/img/@src")[0]
	show_summary = '\r\n\r\n'.join(map(str, meta_data.xpath("//div[@id='leftside']//p[5]/text()")))
	if len(show_summary) < 1:
		show_summary = '\r\n\r\n'.join(map(str, meta_data.xpath("//div[@class='bigBarContainer'][1]//td/text()")))
		
	return VideoClipObject(
		title = show_title,
		summary = show_summary,
		thumb = show_thumb
		)

######################################################################################
# All videos share same codec
	
def MediaObjectsForURL(url):

	return[
	
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			container = Container.MP4,
			parts = [PartObject(key=Callback(PlayVideo, url = url))]
			)
	]

######################################################################################
# Creates a list of available videdo links and returns best quality (first)

def PlayVideo(url):

	page_data = HTML.ElementFromURL(url)
	video = page_data.xpath("//div[@class='barContent']/div/div/a/@href")[0]
	return Redirect(video)